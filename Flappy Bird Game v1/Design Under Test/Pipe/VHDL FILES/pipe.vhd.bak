LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE  IEEE.STD_LOGIC_ARITH.all;
USE  IEEE.STD_LOGIC_SIGNED.all;
use ieee.numeric_std.all;

entity pipe is
	port (	start, vert_sync : in std_logic;
		red_in, green_in, blue_in : in std_logic_vector(3 downto 0);
		pixel_row, pixel_col : in std_logic_vector(9 downto 0);
		red,green,blue : out std_logic_vector(3 downto 0));
end entity pipe;

architecture behav of pipe is

	CONSTANT GAP_HEIGHT : unsigned(9 DOWNTO 0) := CONV_STD_LOGIC_VECTOR(120, 10);
	CONSTANT PIPE_WIDTH : unsigned(9 DOWNTO 0) := CONV_STD_LOGIC_VECTOR(60, 10);
	CONSTANT PIPE_HEIGHT : unsigned(9 DOWNTO 0) := CONV_STD_LOGIC_VECTOR(400, 10);
	CONSTANT PIPE_START : unsigned(9 DOWNTO 0) := CONV_STD_LOGIC_VECTOR(40, 10);
	CONSTANT PIPE_END : unsigned(9 DOWNTO 0) := CONV_STD_LOGIC_VECTOR(439, 10);
	SIGNAL IS_PIPE : STD_LOGIC;

	-- Make these inputs later when connecting to Game Controller
	CONSTANT GAP_YPOS :  signed(9 DOWNTO 0) := CONV_STD_LOGIC_VECTOR(200, 10);
	Signal PIPE_END_X : unsigned(9 DOWNTO 0) := CONV_STD_LOGIC_VECTOR(600, 10);
 	

begin

	-- Setting rgb outputs for pixel
	is_pipe <= '1' when (  ((pixel_row >= PIPE_START and pixel_row <= GAP_YPOS) or 
				(pixel_row>= GAP_HEIGHT + GAP_YPOS and pixel_row <= PIPE_END)) and
				(pixel_col <= PIPE_END_X and  pixel_col>= PIPE_END_X - PIPE_WIDTH)) else '0';
	
	red <= "0000" when is_pipe ='1' else red_in;
	green <= "1111" when is_pipe ='1' else green_in;
	blue <= "0000" when is_pipe ='1' else blue_in;
	
	Move_Pipe: process(vert_sync)
	begin
		if rising_edge(vert_sync) then
			if start = '1' then
				
				if( PIPE_END_X <= CONV_STD_LOGIC_VECTOR(0, 10)) then
					PIPE_END_X <= CONV_STD_LOGIC_VECTOR(500, 10);
				end if;
				
				PIPE_END_X <= PIPE_END_X - CONV_STD_LOGIC_VECTOR(5, 10);
			
			end if;
		end if;
	end process Move_Pipe;

end architecture behav;